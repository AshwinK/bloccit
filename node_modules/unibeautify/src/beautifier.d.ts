/// <reference path="../typings/modules/bluebird/index.d.ts" />
import * as Promise from "bluebird";
import { Language } from "./languages";
import { OptionsRegistry } from "./options";
/**
New name to rename the option (key) to.
*/
export declare type BeautifierOptionRename = string;
/**
Function to process the given options and return a final option value.
*/
export declare type BeautifierOptionTransformFunction = (options: {
    [optionName: string]: any;
}) => any;
/**
Option that transforms one or more required options into a single value.
*/
export declare type BeautifyOptionTransform = [string[], BeautifierOptionTransformFunction];
/**
Option that transforms a single option value with the same name.
*/
export declare type BeautifyOptionTransformSingleFunction = (optionValue: any) => any;
/**
Option for Beautifier given the Language.
*/
export declare type BeautifierLanguageOption = boolean | BeautifierOptionRename | BeautifyOptionTransformSingleFunction | BeautifyOptionTransform;
/**

*/
export interface BeautifierLanguageOptionComplex {
    [optionName: string]: BeautifierLanguageOption;
}
/**

true = supports language, enable all options
false = supports language, disable all options
complex = supports language with specific options
*/
export declare type BeautifierLanguageOptions = boolean | BeautifierLanguageOptionComplex;
/**
Options for Beautifier.

Keys are the names of Languages.
*/
export interface BeautifierOptions {
    [languageName: string]: BeautifierLanguageOptions;
}
/**
Data given to Beautifier's Beautify function.
*/
export interface BeautifierBeautifyData {
    /**
    Text to beautify
    */
    text: string;
    /**
    Language of text.
    */
    language: Language;
    /**
    Option values for given Language.
    */
    options: {
        [optionName: string]: any;
    };
    /**
    File path.
    */
    filePath?: string;
    /**
    Project directory path.
    */
    projectPath?: string;
    /**
    Promise.
    */
    Promise: typeof Promise;
}
export interface LanguageOptionValues {
    [languageName: string]: OptionValues;
}
export interface OptionValues {
    [optionName: string]: any;
}
/**
Data given to Unibeautify to perform beautification with.
*/
export interface BeautifyData {
    /**
    Text to beautify.
    */
    text: string;
    /**
    Name of language to use for beautification.
    */
    languageName?: string;
    /**
    File extension.
    */
    fileExtension?: string;
    /**
    Atom editor grammar.
    */
    atomGrammar?: string;
    /**
    Sublime Text editor syntax.
    */
    sublimeSyntax?: string;
    /**
    File path.
    */
    filePath?: string;
    /**
    Project path.
    */
    projectPath?: string;
    /**
    Option values.
    */
    options: LanguageOptionValues;
}
export declare type BeautifierName = string;
/**
Beautifier
*/
export interface Beautifier {
    /**
    Unique identifying name of the beautifier.
    */
    name: BeautifierName;
    /**
    Supports options of the beautifier.
    */
    options: BeautifierOptions;
    /**
    Beautify the given code with the beautifier.
    */
    beautify(data: BeautifierBeautifyData): Promise<string>;
}
/**
Beautifier
*/
export declare class Unibeautify {
    /**
  
    */
    private options;
    /**
  
    */
    private languages;
    /**
    Get a copy of the languages currently loaded.
    */
    getLoadedLanguages(): Language[];
    /**
  
    */
    private beautifiers;
    /**
    Load Options
    */
    loadOptions(options: OptionsRegistry): Unibeautify;
    /**
    Load a Language
    */
    loadLanguage(language: Language): Unibeautify;
    /**
    Load multiple Languages
    */
    loadLanguages(languages: Language[]): Unibeautify;
    /**
    Load a Beautifier
    */
    loadBeautifier(beautifier: Beautifier): Unibeautify;
    /**
    Load multiple beautifiers.
    */
    loadBeautifiers(beautifiers: Beautifier[]): Unibeautify;
    /**
    Find and return the appropriate Language for the given file extension.
    */
    private findLanguagesForExtension(extension);
    /**
    Find and return the appropriate Languages that match any of the given filter criteria.
    An empty array will be returned if there are no matches.
  
    Precedence:
    - name
    - namespace
    - extension
    - atomGrammar
    - sublimeSyntax
    */
    private findLanguages(query);
    /**
    Find and return the appropriate Beautifiers for the given Language.
    */
    private getBeautifiersForLanguage(language);
    /**
    Get default beautifier for given language and options.
    */
    private getBeautifierForLanguage(language, options);
    /**
    Extract the Language-specific option values.
    */
    static getOptionsForLanguage(language: Language, options: LanguageOptionValues): OptionValues;
    /**
    Extract the option values that the Beautifier supports, including applying transformations.
    */
    static getOptionsForBeautifier(beautifier: Beautifier, language: Language, options: OptionValues): OptionValues;
    /**
    Beautify code
    */
    beautify(data: BeautifyData): Promise<string>;
}
