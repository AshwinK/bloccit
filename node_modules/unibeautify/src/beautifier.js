"use strict";
/// <reference path="../typings/modules/bluebird/index.d.ts" />

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Promise = require("bluebird");
var _ = require("lodash");
;
;
/**
Beautifier
*/

var Unibeautify = function () {
    function Unibeautify() {
        _classCallCheck(this, Unibeautify);

        /**
               */
        this.options = {};
        /**
               */
        this.languages = [];
        /**
               */
        this.beautifiers = [];
    }
    /**
    Get a copy of the languages currently loaded.
    */


    _createClass(Unibeautify, [{
        key: "getLoadedLanguages",
        value: function getLoadedLanguages() {
            return this.languages.slice();
        }
        /**
        Load Options
        */

    }, {
        key: "loadOptions",
        value: function loadOptions(options) {
            _.merge(this.options, options);
            return this;
        }
        /**
        Load a Language
        */

    }, {
        key: "loadLanguage",
        value: function loadLanguage(language) {
            this.languages.push(language);
            return this;
        }
        /**
        Load multiple Languages
        */

    }, {
        key: "loadLanguages",
        value: function loadLanguages(languages) {
            var _languages;

            (_languages = this.languages).push.apply(_languages, _toConsumableArray(languages));
            return this;
        }
        /**
        Load a Beautifier
        */

    }, {
        key: "loadBeautifier",
        value: function loadBeautifier(beautifier) {
            this.beautifiers.push(beautifier);
            return this;
        }
        /**
        Load multiple beautifiers.
        */

    }, {
        key: "loadBeautifiers",
        value: function loadBeautifiers(beautifiers) {
            var _beautifiers;

            (_beautifiers = this.beautifiers).push.apply(_beautifiers, _toConsumableArray(beautifiers));
            return this;
        }
        /**
        Find and return the appropriate Language for the given file extension.
        */

    }, {
        key: "findLanguagesForExtension",
        value: function findLanguagesForExtension(extension) {
            return this.findLanguages({
                extension: extension
            });
        }
        /**
        Find and return the appropriate Languages that match any of the given filter criteria.
        An empty array will be returned if there are no matches.
           Precedence:
        - name
        - namespace
        - extension
        - atomGrammar
        - sublimeSyntax
        */

    }, {
        key: "findLanguages",
        value: function findLanguages(query) {
            var langs = [];
            // Name
            langs.push(_.filter(this.languages, function (c) {
                return _.isEqual(c.name, query.name);
            }));
            // Namespace
            langs.push(_.filter(this.languages, function (c) {
                return _.isEqual(c.namespace, query.namespace);
            }));
            // Extension
            langs.push(_.filter(this.languages, function (c) {
                return _.includes(c.extensions, query.extension);
            }));
            // Atom Grammar
            langs.push(_.filter(this.languages, function (c) {
                return _.includes(c.atomGrammars, query.atomGrammar);
            }));
            // Sublime Syntax
            langs.push(_.filter(this.languages, function (c) {
                return _.includes(c.sublimeSyntaxes, query.sublimeSyntax);
            }));
            // Return unique array of Languages
            return _.uniq(_.flatten(langs));
        }
        /**
        Find and return the appropriate Beautifiers for the given Language.
        */

    }, {
        key: "getBeautifiersForLanguage",
        value: function getBeautifiersForLanguage(language) {
            // TODO
            return _.filter(this.beautifiers, function (b) {
                return _.includes(Object.keys(b.options), language.name);
            });
        }
        /**
        Get default beautifier for given language and options.
        */

    }, {
        key: "getBeautifierForLanguage",
        value: function getBeautifierForLanguage(language, options) {
            // TODO
            var beautifiers = this.getBeautifiersForLanguage(language);
            if (beautifiers.length > 0) {
                return beautifiers[0];
            } else {
                return null;
            }
        }
        /**
        Extract the Language-specific option values.
        */

    }, {
        key: "beautify",

        /**
        Beautify code
        */
        value: function beautify(data) {
            // Get Language
            var langs = this.findLanguages({
                atomGrammar: data.atomGrammar,
                extension: data.fileExtension,
                name: data.languageName,
                sublimeSyntax: data.sublimeSyntax
            });
            var lang = langs.length > 0 ? langs[0] : null;
            if (lang == null) {
                return Promise.reject(new Error("Cannot find language."));
            }
            // Get Options for Language
            var langOptions = Unibeautify.getOptionsForLanguage(lang, data.options);
            // Get Beautifier
            var beautifier = this.getBeautifierForLanguage(lang, langOptions);
            // Run beautifier
            if (beautifier != null) {
                // Get Options for Beautifier
                var options = Unibeautify.getOptionsForBeautifier(beautifier, lang, langOptions);
                return beautifier.beautify({
                    filePath: data.fileExtension,
                    language: lang,
                    options: options,
                    Promise: Promise,
                    projectPath: data.projectPath,
                    text: data.text
                });
            } else {
                return Promise.reject(new Error("Beautifier not found for Language: " + lang.name));
            }
        }
    }], [{
        key: "getOptionsForLanguage",
        value: function getOptionsForLanguage(language, options) {
            var name = language.name;

            return options[name] || {};
        }
        /**
        Extract the option values that the Beautifier supports, including applying transformations.
        */

    }, {
        key: "getOptionsForBeautifier",
        value: function getOptionsForBeautifier(beautifier, language, options) {
            var globalOptions = beautifier.options["_"];
            var beautifierOptions = beautifier.options[language.name];
            // Global options
            if ((typeof globalOptions === "undefined" ? "undefined" : _typeof(globalOptions)) === "object") {
                if (beautifierOptions === true) {
                    beautifierOptions = globalOptions;
                } else if ((typeof beautifierOptions === "undefined" ? "undefined" : _typeof(beautifierOptions)) === "object") {
                    beautifierOptions = Object.assign({}, globalOptions, beautifierOptions);
                }
            }
            // Transform options
            if (typeof beautifierOptions === "boolean") {
                if (beautifierOptions === true) {
                    return options;
                } else {
                    return {};
                }
            } else if ((typeof beautifierOptions === "undefined" ? "undefined" : _typeof(beautifierOptions)) === "object") {
                var transformedOptions = {};
                for (var field in beautifierOptions) {
                    var op = beautifierOptions[field];
                    if (typeof op === "string") {
                        transformedOptions[field] = options[op];
                    } else if (typeof op === "function") {
                        transformedOptions[field] = op(options[field]);
                    } else if (typeof op === "boolean") {
                        if (op === true) {
                            transformedOptions[field] = options[field];
                        }
                    } else if (_.isArray(op)) {
                        var _op = _slicedToArray(op, 2);

                        var fields = _op[0];
                        var fn = _op[1];

                        var vals = _.map(fields, function (f) {
                            return options[f];
                        });
                        var obj = _.zipObject(fields, vals);
                        transformedOptions[field] = fn(obj);
                    }
                }
                return transformedOptions;
            } else {
                return options;
            }
        }
    }]);

    return Unibeautify;
}();

exports.Unibeautify = Unibeautify;
//# sourceMappingURL=beautifier.js.map
//# sourceMappingURL=data:application/json;base64,